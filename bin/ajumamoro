#!/usr/bin/env php
<?php
if(file_exists(__DIR__ . "/../vendor/autoload.php")) {
    require __DIR__ . "/../vendor/autoload.php";
} else if(file_exists(__DIR__ . "/../../../autoload.php")) {
    require __DIR__ . "/../../../autoload.php";
} else {
    require "vendor/autoload.php";
}

use clearice\argparser\ArgumentParser;
use ntentan\panie\Container;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Psr\Log\LoggerInterface;
use ntentan\config\Config;
use ntentan\utils\Text;
use ajumamoro\BrokerInterface;
use ajumamoro\exceptions\AjumamoroException;


// Setup arguments
$argumentParser = new ArgumentParser();
$argumentParser->addCommand(['name' => 'start', 'help' => 'start the ajumamoro broker']);
$argumentParser->addCommand(['name' => 'stop', 'help' => 'stop the ajumamoro broker']);

$argumentParser->addOption(array(
        'short_name' => 'b',
        'name' => 'broker',
        'help' => 'specify the backend to be used for storing job tasks. Supported backends: redis, postgresql, mysql and sqlite',
        'type' => 'string',
        'value' => 'STORE',
        'command' => 'start'
    ));
$argumentParser->addOption(array(
        'short_name' => 's',
        'name' => 'bootstrap',
        'help' => 'path to a script to include when ajumamoro starts',
        'type' => 'string',
        'value' => 'PATH',
        'command' => 'start'
    ));
$argumentParser->addOption(array(
        'short_name' => 'l',
        'name' => 'load-class-files',
        'help' => 'forces ajumamoro to load php files of the job classes. By default ajumamoro depends on the autoloader to handle the loading of class files.',
        'command' => 'start'
    ));
$argumentParser->addOption(array(
        'short_name' => 'd',
        'name' => 'daemon',
        'help' => 'run the process as a daemon',
        'command' => 'start'
    ));
$argumentParser->addOption(array(
        'short_name' => 'D',
        'name' => 'delay',
        'help' => 'waiting time in microseconds between broker polling',
        'command' => 'start'
    ));
$argumentParser->addOption(array(
        'short_name' => 'c',
        'name' => 'config',
        'help' => 'a path to the configuration file for ajumamoro',
        'value' => 'PATH',
        'type' => 'string',
        'command' => 'start'
    ));
$argumentParser->addOption([
        'short_name' => 'i',
        'name' => 'instance',
        'help' => 'a name for a given ajumamoro instance',
        'value' => 'INSTANCE',
        'type' => 'string',
        'command' => 'start',
        'default' => 'default'
    ]);

$argumentParser->enableHelp("Ajumamoro is a tool for running background tasks in PHP apps.");
$arguments = $argumentParser->parse();

if (!isset($arguments['__command']) && isset($arguments['__args'[0]])) {
    fwrite(STDERR, "You specified an unknown command [{$arguments['__args'][0]}]. Please use {$argv[0]} --help for more information.\n");
    exit(120);
} else if(!isset($arguments['__command'])) {
    fwrite(STDERR, "Please provide a command or use {$argv[0]} --help for more information.\n");
    exit(120);
}

// Setup DI bindings
$container = new Container();
$container->setup(
    [
        LoggerInterface::class => [function($container) {
            $logger = new Monolog\Logger("ajumamoro");
            $logger->pushHandler(new StreamHandler(STDOUT, Logger::DEBUG));
            return $logger;
        }, 'singleton' => true],
        Config::class => [function() use ($arguments) {
            $config = new Config();
            if(isset($arguments['config']) && file_exists($arguments['config'])) {
                $config->readPath($arguments['config']);
            } else {
                fwrite(STDERR, "Failed to read configuration file. Please provide a valid configuration with the --config option\n");
                exit(120);
            }
            return $config;
        }, 'singleton' => true],
        BrokerInterface::class => function($container) {
            $config = $container->resolve(Config::class);
            if (!$config->isKeySet('broker')) {
                throw new AjumamoroException("There is no job broker specified in the configuration file.");
            }
            $broker = $config->get('broker');
            $brokerClass = "\\ajumamoro\\brokers\\" . Text::ucamelize($broker) . "Broker";
            return $container->resolve($brokerClass, ['config' => $config->get($broker)]);
        }
    ]);

// Run require command
$class = "\\ajumamoro\\commands\\" . ucfirst($arguments['__command']);

try {
    $container->resolve($class)->run();
} catch (\Exception $e) {
    fputs(STDERR, "Error: " . $e->getMessage() . "\n");
    exit(1);
}
